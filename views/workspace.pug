doctype html
html
  head
    script(src='skultjs/skulpt.min.js', type='text/javascript')
    script(src='skultjs/skulpt-stdlib.js', type='text/javascript')
    meta(charset='utf-8')
    meta(http-equiv='X-UA-Compatible', content='IE=edge')
    meta(name='viewport', content='width=device-width, initial-scale=1')
    title Buggy

    // Vendor CSS
    link(href='jquery/vendors/bower_components/animate.css/animate.min.css', rel='stylesheet')
    link(href='jquery/vendors/bower_components/bootstrap-sweetalert/lib/sweet-alert.css', rel='stylesheet')
    link(href='jquery/vendors/bower_components/material-design-iconic-font/dist/css/material-design-iconic-font.min.css', rel='stylesheet')
    link(href='jquery/vendors/bower_components/malihu-custom-scrollbar-plugin/jquery.mCustomScrollbar.min.css', rel='stylesheet')

    // CSS
    link(href='jquery/css/app.min.1.css', rel='stylesheet')
    link(href='jquery/css/app.min.2.css', rel='stylesheet')
    link(rel='stylesheet', href='https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css')
    script(src='https://ajax.googleapis.com/ajax/libs/jquery/3.2.1/jquery.min.js')
    script(src='https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js')

    style.
      ul.top_nav {
      list-style-type: none;
      margin: 0;
      padding: 0;
      overflow: hidden;
      background-color: #212b3d;
      }
      #pills {
      border-radius: 0px;
      }
      .btn:not(.btn-link){
        border-radius: 0px;
        box-shadow:none;
      }
      #company {
      left: 46%;
      position: absolute;
      }
      #nav_item {
      float: right;
      }
      #nav_items {
      float: left;
      }
      li.other a, .dropbtn {
      display: inline-block;
      color: white;
      text-align: center;
      padding: 14px 16px;
      text-decoration: none;
      }
      li.others a, .dropbtn {
      display: inline-block;
      color: white;
      text-align: center;
      padding: 14px 16px;
      text-decoration: none;
      }
      li.others a:hover, .dropdown:hover .dropbtn {
      background-color: black;
      }
      li.dropdown {
      display: inline-block;
      }
      li.code_exec a:hover, .dropdown:hover .dropbtn {
      background-color: gray;
      }
      .dropdown-content {
      display: none;
      position: absolute;
      background-color: #f9f9f9;
      min-width: 160px;
      box-shadow: 0px 8px 16px 0px rgba(0,0,0,0.2);
      z-index: 1;
      }
      .dropdown-content a {
      color: black;
      padding: 12px 16px;
      text-decoration: none;
      display: block;
      text-align: left;
      }
      .dropdown-content a:hover {background-color: #f1f1f1}
      .dropdown:hover .dropdown-content {
      display: block;
      }
      html, body {
      height: 100%;
      margin: 0;
      background-color: #212b3d;
      }
      pre {
        position: absolute
        height: 100%;
        width:100%;
        overflow: auto;
        background-color: #eeeeee;
        word-break: normal !important;
        word-wrap: normal !important;
        white-space: pre !important;
      }
      /* The Modal (background) */
      .modal {
          display: none; /* Hidden by default */
          position: fixed; /* Stay in place */
          z-index: 1; /* Sit on top */
          padding-top: 100px; /* Location of the box */
          left: 0;
          top: 0;
          width: 100%; /* Full width */
          height: 100%; /* Full height */
          overflow: auto; /* Enable scroll if needed */
          background-color: rgb(0,0,0); /* Fallback color */
          background-color: rgba(0,0,0,0.4); /* Black w/ opacity */
      }

      /* Modal Content */
      .modal-content {
          position: relative;
          background-color: #fefefe;
          margin: auto;
          padding: 0;
          border: 1px solid #888;
          width: 30%;
          box-shadow: 0 4px 8px 0 rgba(0,0,0,0.2),0 6px 20px 0 rgba(0,0,0,0.19);
          -webkit-animation-name: animatetop;
          -webkit-animation-duration: 0.4s;
          animation-name: animatetop;
          animation-duration: 0.4s
      }

      /* Add Animation */
      @-webkit-keyframes animatetop {
          from {top:-300px; opacity:0} 
          to {top:0; opacity:1}
      }

      @keyframes animatetop {
          from {top:-300px; opacity:0}
          to {top:0; opacity:1}
      }

      /* The Close Button */
      .close {
          color: white;
          float: right;
          font-size: 28px;
          font-weight: bold;
      }

      .close:hover,
      .close:focus {
          color: #000;
          text-decoration: none;
          cursor: pointer;
      }

      .modal-header {
          background-color: #212b3d;
          color: white;
      }

      .modal-body {
        padding: 2px 16px;
        background-color: #212b3d;
      }

      .modal-footer {
          background-color: #212b3d;
          color: white;
      }
      #snippet {
      position: relative;
      width:calc(48% - 10px);
      margin: 5px;
      background-color: white;
      height:92%;
      color: black;
      box-sizing: border-box;
      float:left;
      overflow-y:auto;
      }
      #editor {
      position: relative;
      margin: 5px;
      width: calc(51% - 10px);
      height:92%;
      float: left
      }
      #center {
      position: absolute;
      width: 100%;
      height:100%;
      }

      input[type=text] {
        width: 200px;
        box-sizing: border-box;
        border: 2px solid #ccc;
        border-radius: 4px;
        font-size: 16px;
        background-color: white;
        background-image: url('searchicon.png');
        background-position: 10px 10px; 
        background-repeat: no-repeat;
        padding: 12px 20px 12px 40px;
        -webkit-transition: width 0.4s ease-in-out;
        transition: width 0.4s ease-in-out;
      }
      .button_holder{
        float: right;
      }
      input[type=text]:focus {
        width: 100%;
      }
  body
    - var user_name = (username);
    ul.top_nav
      li#company.other
        a.navbar-left(href='#')
          img(src='login/buggy_logo.png', width='25', height='14')
          |       BUGGY
      li#nav_item.others
        a(href="https://buggy333.herokuapp.com/!") Log Out
      li#nav_items.others
        a(onclick = "newFile()") New File
      li#nav_items.others
        a(onclick = "saveOnClick()") Save File as

    // The Modal
    #myModal.modal
      // Modal content
      .modal-content
        .modal-header
          span.close ×
          h2 Save file as:
        .modal-body
          br
          input#fname(type='text', name='filename')
        .modal-footer
          ul.top_nav
            li#nav_items.others(style="width:100%")
              a(onclick="getFileName()" style="float:right") Save
    #editor
      code#center
    #snippet
      ul.nav.nav-pills.nav-justified
        li
          a#pills(data-toggle='pill', href='#files') My Files
        li.active
          a#pills(data-toggle='pill', href='#code_snippets_holder') Code Snippets
        li
          a#pills(data-toggle='pill', href='#code_execution') Code Execution
        li
          a#pills(data-toggle='pill', href='#buggy_documentation') Buggy Commands

      .tab-content(style="position: absolute; display:block; width:100% !important; height:70% !important; padding:0;border-width:0")

        #code_snippets_holder.tab-pane.fade.in.active(style="overflow: auto")
          pre#code_snippets(style='background-color: white; border: none')

        #files.tab-pane.fade(style='background-color: white; border: none')
          .card
            .listview.lv-bordered.lv-lg
              //.lv-header-alt.clearfix
                //form
                  //input(type='text', name='search', placeholder='Search Files')
              .lv-body

        pre#code_execution.tab-pane.fade(style='background-color: white; border: none')
          ul.nav.nav-pills.nav-justified
            li.code_exec(style="background-color: green; border-radius: 5px")
              a#pill(onclick="execute()" style="color: white;") Run
          pre#output(style='background-color: white; border: none')
          pre#mycanvas(style='background-color: white; border: none')

        #buggy_documentation.tab-pane.fade(style='background-color: white; border: none')
          pre(style='background-color: white; border:none').
            General commands:
            “Buggy, start/stop listening” turns the voice recognition on and off
            “Buggy, please run” executes your code and displays the results
            “Buggy, search for ____” searches StackOverflow for ____ and displays the results
            “Focus” simulates clicking on the text input field
            File commands:
            “Buggy, save file as ____” saves the file to user’s account with ____ as its filename
            “Buggy, delete file named ____” deletes the file named ____.
            “Buggy,download file named ____” downloads the file named ____.
            “Buggy, open file named ____” opens the file named ____.
            Cursor commands:
            “Move left/right/up/down” moves the cursor left/right one word, or up/down one line 
            “Move to start/end” moves the cursor to the start/end of the file 
            “Move to front/back” moves the cursor to the front/back of the line of code
            Typing commands: 
            Saying _____ types _____ in the document
            If you make a mistake: “clear” removes the line, “reset” restarts the document
            If a word isn’t working, spell it out
            Special characters have their own rules:
             “Pound” to type #
            “Asterisk” to type *
            “Colon” to type :
            “Comma” to type ,
            “Space” to type a space
            “Enter” to start a new line
            “Left curly” to type {
            “Right curly” to type }
            “Left paren” to type (
            “Right paren” to type )
            “Left bracket” to type [
            “Right bracket” to type ]  


    script(src='/socket.io/socket.io.js')
    script(src='https://cdnjs.cloudflare.com/ajax/libs/ace/1.2.6/ace.js', type='text/javascript', charset='utf-8')
    script(type='text/javascript').

      var getFileName = function(){
        var filename = document.getElementById("fname").value;
        var list = document.getElementsByClassName("lv-item media");
        var alreadyIn = false;
        for (var i = 0; i < list.length; i++){
          if (list[i].id == filename){
          alreadyIn = true; 
          }
        }
         if ((filename == null || filename == "") || (alreadyIn)) {
          alert("Invalid File Name");
         }
          else{
            console.log("THis is the file name" + filename);
            hasName = true;
            file_name = filename;
            saveFile(filename);
            savedFile = true;
            fileDisplay(filename);
            var list = document.getElementsByClassName("button_holder");
            console.log(list)
            for (var i = 0; i < list.length; i++){
              list[i].style.visibility = "hidden"
            }
            document.getElementById(filename+"_buttons").style.visibility="visible";
            console.log('true')
          }
          var modal = document.getElementById('myModal');
          modal.style.display = "none";
      }
      /************************************* Setting Up editor ***********************************************************/
      hasName = false;
      file_name = "";
      savedFile = false;
      var editor = ace.edit("center");
      editor.setTheme("ace/theme/cobalt");
      editor.getSession().setMode("ace/mode/python");
      editor.setShowPrintMargin(false);
      editor.on("change", function(e){
        if(hasName){
          saveFile(file_name)
        }
      })
      /************************************** Socket Setup ***************************************************************/
      $(".nav-pills").click(function(){
          $(this).tab('show');
      });

      function activaTab(tab){
        $('.nav-pills a[href="#' + tab + '"]').tab('show');
      };

      activaTab('code_snippets_holder');

      var socket = io();

      socket.on('reply', function(data){
      document.getElementById("code_snippets").innerHTML += data.response + '\n';
      });

      socket.on('opened', function(data){
      editor.setValue(data.file, -1)
      editor.navigateFileEnd()
      });

      socket.on('welcome', function(data){
      var user = ""+ "#{user_name}"
      console.log(user);
      document.getElementById("code_snippets").innerHTML += data.message + '!\n';
      });

      var deleteFile = function (filename){
        var user = "#{user_name}"
        socket.emit('deleteFile', {username: user, name: filename});
      }

      var downloadFile = function (filename){
        var user = "#{user_name}"
        socket.emit('download', {username: user , name: filename});
      } 

      var saveOnClick = function(){
        if (!hasName){
          // Get the modal
          var modal = document.getElementById('myModal');

          // Get the <span> element that closes the modal
          var span = document.getElementsByClassName("close")[0];

          modal.style.display = "block";

          // When the user clicks on <span> (x), close the modal
          span.onclick = function() {
              modal.style.display = "none";
          }

          // When the user clicks anywhere outside of the modal, close it
          window.onclick = function(event) {
              if (event.target == modal) {
                  modal.style.display = "none";
              }
          }
        }
      }

      var newFile = function(){
        if ((editor.getValue() != "") &&(!hasName)){
          if (confirm("Would you like to save the current file?") == true){
            saveOnClick()
          }
        }
        else {
          file_name = 'untitled';
          hasName = false;
          editor.setValue("", -1);
          editor.navigateFileEnd();
          savedFile = false;
        }
      }

      var saveFile = function (filename){
        var fileContent = editor.getValue();
        var user = "#{user_name}"
        socket.emit('saveFile', {content: fileContent, username: user, name: filename});
        savedFile = true;
      }

      var openFile = function(filename){
        if (filename != file_name){
          var user = "#{user_name}";
          socket.emit('open', {username: user, name: filename});
          file_name = filename;
          hasName = true;
        }
      }

      var fileDisplay = function(filename){

      console.log(filename);
      var user = "#{user_name}";
      var file = document.createElement('div');
      var filename = filename;
      file.id = filename;
      file.className = "lv-item media"; 

      file.addEventListener("click", function() {
        var list = document.getElementsByClassName("button_holder");
        console.log(list)
        for (var i = 0; i < list.length; i++){
          list[i].style.visibility = "hidden"
        }
        openFile(filename);
        document.getElementById(filename+"_buttons").style.visibility="visible";
        console.log('true')
      }, false);

      var parent = document.getElementsByClassName("lv-body")[0];
      parent.appendChild(file);

      parent = file;
      var button_demo_div = document.createElement('div');
      button_demo_div.className = "btn-demo";
      parent.appendChild(button_demo_div);

      parent = button_demo_div;
      var titleDiv = document.createElement('div');
      titleDiv.classname = "lv-title"
      titleDiv.innerHTML = filename;
      parent.append(titleDiv);

      parent = titleDiv;
      var button_holder_Div = document.createElement('div');
      button_holder_Div.className = 'button_holder';
      button_holder_Div.id = filename+"_buttons"
      button_holder_Div.style.visibility ='hidden'
      parent.append(button_holder_Div);

      parent = button_holder_Div;

      var download_button = document.createElement('button');
      download_button.className = "btn btn-default btn-sm";
      download_button.type = "button";
      parent.append(download_button);

      var delete_button = document.createElement('button');
      delete_button.className = "btn btn-default btn-sm";
      delete_button.type = "button";
      parent.append(delete_button);

      spanDiv = document.createElement('span');
      spanDiv.className = 'glyphicon glyphicon-download';
      download_button.append(spanDiv);
      download_button.innerHTML += " Download";

      spanDiv = document.createElement('span');
      spanDiv.className = 'glyphicon glyphicon-trash';
      delete_button.append(spanDiv);
      delete_button.innerHTML += " Delete";

      delete_button.addEventListener("click", function(e) {
        if (confirm("Are you sure you want to delete "+ filename+ "?") == true){
        document.getElementById(filename).remove();
        deleteFile(filename);
        hasName = false;
        savedFile = false;
        file_name = "untitled"
        editor.setValue("", -1);
        editor.navigateFileEnd();
        console.log('true')
        e.stopPropagation()
        }
      }, false);

      download_button.addEventListener("click", function(e) {
        downloadFile(filename);
        console.log('true')
        e.stopPropagation()
      }, false);
      }


      socket.on('files', function(data){
        fileDisplay(data.filename)
     });

      socket.on('downloadableFile', function(data){
      var elem = document.createElement('a');
      elem.setAttribute('href', 'data:text/plain;charset=utf-8,' + encodeURIComponent(data.content));
      elem.setAttribute('download', data.name+ ".py");
      elem.style.display = 'none';
      document.body.appendChild(elem);
      elem.click();
      document.body.removeChild(elem);
      });

      //socket.on('update', function(data){
        //openFile(data.file);
      //});


      /**************************************** Running Code on the Client Side ******************************************/
      // output functions are configurable.  This one just appends some text
      // to a pre element.
      function outf(text) { 
          var mypre = document.getElementById("output"); 
          mypre.innerHTML = mypre.innerHTML + text; 
      } 
      function builtinRead(x) {
          if (Sk.builtinFiles === undefined || Sk.builtinFiles["files"][x] === undefined)
                  throw "File not found: '" + x + "'";
          return Sk.builtinFiles["files"][x];
      }
      // Here's everything you need to run a python program in skulpt
      // grab the code from your textarea
      // get a reference to your pre element for output
      // configure the output function
      // call Sk.importMainWithBody()
      function runit(data) { 
         var prog = data
         var mypre = document.getElementById("output"); 
         mypre.innerHTML = 'Executing code:\n'; 
         Sk.pre = "output";
         Sk.configure({output:outf, read:builtinRead}); 
         (Sk.TurtleGraphics || (Sk.TurtleGraphics = {})).target = 'mycanvas';
         var myPromise = Sk.misceval.asyncToPromise(function() {
             return Sk.importMainWithBody("<stdin>", false, prog, true);
         });
         myPromise.then(function(mod) {
             console.log('success');
         },
             function(err) {
             mypre.innerHTML = 'Executing code:\n' + err.toString();
             console.log(err.toString());
         });
      } 

      /****************************************  Compiler ****************************************************************/
      listening = false;
      socket.emit('getFiles', {username: "#{user_name}"});

      var execute = function() {
        var text = editor.getValue();
        runit(text);
      }

      var compiler = function(data, editor){

            var messages = data.split(" ");

            for (i = 0; i < messages.length; i++){
              if ((messages[i] == 'buggy') && ((i + 2) < messages.length)){
                if ((messages[i+1] == "start") && (messages[i+2] == 'listening')){
                  listening = true;
                  break;
                }
                else if ((messages[i+1] == "stop") && (messages[i+2] == 'listening')){
                  listening = false;
                  break;
                }
                else if (messages[i+1] == "search") {
                  var query = "";
                  for (j = i + 1; j < messages.length; j++){
                    query += messages[j] + ' ';
                  }
                  document.getElementById("code_snippets").innerHTML+=query + '<br>';
                  socket.emit('search', {message: query});
                  break;
                }
                else if ((messages[i+1] == "please") && (messages[i+2] == "run")) {
                  var text = editor.getValue();
                  activaTab('code_execution');
                  runit(text);
                  break;
                }
                else if ((((messages[i+1] == "save") && (messages[i+2] == 'file')) && (messages[i+3] == 'as')) && (messages.length >= 5)) {
                  savedFile = true;
                  var fileContent = editor.getValue();
                  var filename = messages[i+4]
                  var list = document.getElementsByClassName("lv-item media");
                  var alreadyIn = false;
                  for (var i = 0; i < list.length; i++){
                    if (list[i].id == filename){
                    alreadyIn = true; 
                    }
                  }
                 if ((filename == null || filename == "") || (alreadyIn)) {
                  alert("Invalid File Name");
                 }
                else {
                  var user = "#{user_name}"
                  socket.emit('saveFile', {content: fileContent, username: user, name: filename});
                }
                  break;
              }
                else if ((((messages[i+1] == "delete") && (messages[i+2] == 'file')) && (messages[i+3] == 'named')) && (messages.length >= 5)) {
                  var filename = messages[i+4]
                  var user = "#{user_name}"
                  socket.emit('deleteFile', {username: user, name: filename});
                  break;
                }
                else if ((((messages[i+1] == "download") && (messages[i+2] == 'file')) && (messages[i+3] == 'named')) && (messages.length >= 5)) {
                  var filename = messages[i+4]
                  var user = "#{user_name}";
                  socket.emit('download', {username: user , name: filename});
                  break;
                }
                else if ((((messages[i+1] == "open") && (messages[i+2] == 'file')) && (messages[i+3] == 'named')) && (messages.length >= 5)) {
                  var filename = messages[i+4]
                  var user = "#{user_name}";
                  socket.emit('open', {username: user, name: filename});
                  break;
                }
                else if (((messages[i+1] == "create") && (messages[i+2] == 'new')) && (messages[i+3] == 'file')) {
                  newFile();
                  break;
                }
              }
              if (listening){
                if (messages[i] == "quote"){
                  editor.insert("\"");
                }
                else if ((messages[i] == "fort") || (messages[i] == "fortran")) {
                  editor.insert("for");
                }
                else if (((messages[i] == "is") && (messages[i + 1] == "less")) && (messages[i+2] == "than")) {
                  editor.insert("<");
                  i = i + 2;
                }
                else if ((messages[i] == "greater") && (messages[i + 1] == "than")) {
                  editor.insert(">");
                }
                else if (messages[i] == "Focus") {
                  editor.focus();
                  }
                else if (messages[i] == "star") {
                  editor.insert("*");
                }
                else if (messages[i] == "colon") {
                  editor.insert(":");
                }
                else if (messages[i] == "plus") {
                  editor.insert("+");
                }
                else if (messages[i] == "equals") {
                  editor.insert("=");
                }
                else if (messages[i] == "pound") {
                  editor.insert("#");
                }
                else if (messages[i] == "comma") {
                  editor.insert(",");
                }
                else if ((messages[i] == "new") || (messages[i] == "\n")) {
                  editor.insert("\n");
                }
                else if (messages[i] == "space"){
                  editor.insert(" ");
                }
                else if (messages[i] == "delete"){
                  editor.removeWordLeft();
                }
                else if (messages[i] == "clear") {
                  editor.removeToLineStart();
                }
                else if (messages[i] == "reset") {
                  editor.selectAll();
                  editor.removeLines();
                }
                else if ( (messages[i] == "move") || (messages[i] == "go") ) {       
                   if ((messages[i+1] == "upwards") || (messages[i+1] == "up")) {
                      editor.navigateUp(1);
                      i++;
                    }
                    else if ((messages[i+1] == "downwards") || (messages[i+1] == "down")){
                      editor.navigateDown(1);
                      i++;
                   }
                   else if (messages[i+1] == "left") {
                      editor.navigateWordLeft();
                      i++;
                   }
                   else if (messages[i+1] == "right") {
                      editor.navigateWordRight();
                      i++;
                   }
                   else if (messages[i+1] == "to") {
                      if (messages[i+2] == "start") {
                        editor.navigateFileStart();
                        i++;
                      }
                      else if (messages[i+2] == "end") {
                        editor.navigateFileEnd();
                        i++;
                      }
                      else if (messages[i+2] == "front") {
                        editor.navigateLineStart();
                        i++;
                      }
                      else if (messages[i+2] == "back") {
                        editor.navigateLineEnd();
                        i++;
                      }
                      else {
                        editor.insert("move to ");
                      }
                      i++;
                    }
                   else {
                      editor.insert(messages[i]+" ");
                    }
                  }
                else if (messages[i] == "left") {
                   if (messages[i+1] == "curly") {
                      editor.insert("{");
                      i++;
                    }
                    else if (messages[i+1] == "paren") {
                      editor.insert("(");
                      i++;
                    }
                   else if (messages[i+1] == "bracket") {
                      editor.insert("[");
                      i++;
                   }
                  else {
                      editor.insert(messages[i]+' ');
                    }
                }
                else if (messages[i] == "right") {
                   if (messages[i+1] == "curly") {
                      editor.insert("}");
                      i++;
                    }
                    else if (messages[i+1] == "paren") {
                      editor.insert(")");
                      i++;
                   }
                   else if (messages[i+1] == "bracket") {
                      editor.insert("]");
                      i++;
                    }
                    else {
                      editor.insert(messages[i]+' ');
                    }
                }
                else{
                  editor.insert(messages[i]+' ');
                }
              }
            }
          }


          if (!('webkitSpeechRecognition' in window)) {
            upgrade();
          } else {
            var recognition = new webkitSpeechRecognition();
            recognition.continuous = false;
            recognition.interimResults = false;
            recognition.onerror = function(event) { console.log("oops") }
            recognition.onend = function() { recognition.start() }
            recognition.onresult = function(event) {
            compiler(event.results[0][0].transcript.toLowerCase(), editor);
          };
        }
          console.log("Hello World")
          recognition.start()
