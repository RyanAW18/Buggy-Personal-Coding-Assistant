doctype html
html
  head
    script(src='skultjs/skulpt.min.js', type='text/javascript')
    script(src='skultjs/skulpt-stdlib.js', type='text/javascript')
    meta(charset='utf-8')
    meta(http-equiv='X-UA-Compatible', content='IE=edge')
    meta(name='viewport', content='width=device-width, initial-scale=1')
    title Buggy

    // Vendor CSS
    link(href='jquery/vendors/bower_components/animate.css/animate.min.css', rel='stylesheet')
    link(href='jquery/vendors/bower_components/bootstrap-sweetalert/lib/sweet-alert.css', rel='stylesheet')
    link(href='jquery/vendors/bower_components/material-design-iconic-font/dist/css/material-design-iconic-font.min.css', rel='stylesheet')
    link(href='jquery/vendors/bower_components/malihu-custom-scrollbar-plugin/jquery.mCustomScrollbar.min.css', rel='stylesheet')

    // CSS
    link(href='jquery/css/app.min.1.css', rel='stylesheet')
    link(href='jquery/css/app.min.2.css', rel='stylesheet')
    link(rel='stylesheet', href='https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css')
    script(src='https://ajax.googleapis.com/ajax/libs/jquery/3.2.1/jquery.min.js')
    script(src='https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js')

    style.
      ul.top_nav {
      list-style-type: none;
      margin: 0;
      padding: 0;
      overflow: hidden;
      background-color: #212b3d;
      }
      #company {
      left: 49%;
      position: absolute;
      }
      #nav_item {
      float: right;
      }
      #nav_items {
      float: left;
      }
      li.other a, .dropbtn {
      display: inline-block;
      color: white;
      text-align: center;
      padding: 14px 16px;
      text-decoration: none;
      }
      li.other a:hover, .dropdown:hover .dropbtn {
      background-color: gray;
      }
      li.dropdown {
      display: inline-block;
      }
      .dropdown-content {
      display: none;
      position: absolute;
      background-color: #f9f9f9;
      min-width: 160px;
      box-shadow: 0px 8px 16px 0px rgba(0,0,0,0.2);
      z-index: 1;
      }
      .dropdown-content a {
      color: black;
      padding: 12px 16px;
      text-decoration: none;
      display: block;
      text-align: left;
      }
      .dropdown-content a:hover {background-color: #f1f1f1}
      .dropdown:hover .dropdown-content {
      display: block;
      }
      html, body {
      height: 100%;
      margin: 0;
      background-color: #212b3d;
      }
      pre {
        position: absolute
        height: 100%;
        width:100%;
        overflow: auto;
        background-color: #eeeeee;
        word-break: normal !important;
        word-wrap: normal !important;
        white-space: pre !important;
      }

      #snippet {
      position: relative;
      width:calc(48% - 10px);
      margin: 5px;
      background-color: white;
      height:100%;
      color: black;
      box-sizing: border-box;
      float:left;
      overflow-y:auto;
      }
      #editor {
      position: relative;
      margin: 5px;
      width: calc(51% - 10px);
      height:100%;
      float: left
      }
      #center {
      position: absolute;
      width: 100%;
      height:100%;
      }
      input[type=text] {
        width: 200px;
        box-sizing: border-box;
        border: 2px solid #ccc;
        border-radius: 4px;
        font-size: 16px;
        background-color: white;
        background-image: url('searchicon.png');
        background-position: 10px 10px; 
        background-repeat: no-repeat;
        padding: 12px 20px 12px 40px;
        -webkit-transition: width 0.4s ease-in-out;
        transition: width 0.4s ease-in-out;
      }
      .button_holder{
        float: right;
      }
      input[type=text]:focus {
        width: 100%;
      }

  body
    - var user_name = (username);
    ul.top_nav
      li#company.other
        a.navbar-left(href='#')
          img(src='login/buggy_logo.png', width='25', height='14')
      li#nav_item.other
        a(href='#about') Settings
      li#nav_items.other
        a(href='#news') BUGGY
    #editor
      code#center
    #snippet
      ul.nav.nav-pills.nav-justified
        li
          a#pills(data-toggle='pill', href='#files') My Files
        li.active
          a#pills(data-toggle='pill', href='#code_snippets_holder') Code Snippets
        li
          a#pills(data-toggle='pill', href='#code_execution') Code Execution
        li
          a#pills(data-toggle='pill', href='#buggy_documentation') Buggy Commands

      .tab-content(style="position: absolute; display:block; width:100% !important; height:100% !important; padding:0;border-width:0")

        #code_snippets_holder.tab-pane.fade.in.active(style="position: absolute; width:100%; height:100%; overflow: auto")
          pre#code_snippets.tab-pane.fade.in.active(style='display:block; background-color: white; border: none')

        #files.tab-pane.fade(style='display:block; background-color: white; border: none')
          .card
            .listview.lv-bordered.lv-lg
              .lv-header-alt.clearfix
                form
                  input(type='text', name='search', placeholder='Search Files')
              .lv-body

        #code_execution.tab-pane.fade(style="position: absolute; width:100%; height:100%; overflow: auto")
          pre#output.tab-pane.fade(style='display:block; background-color: white; border: none')

        #buggy_documentation.tab-pane.fade(style='display:block; background-color: white; border: none')
          p Fill this with information on how to use buggy !!!!!!!!!!!!

    script(src='/socket.io/socket.io.js')
    script(src='https://cdnjs.cloudflare.com/ajax/libs/ace/1.2.6/ace.js', type='text/javascript', charset='utf-8')
    script(type='text/javascript').
      /************************************* Setting Up editor ***********************************************************/
      var editor = ace.edit("center");
      editor.setTheme("ace/theme/cobalt");
      editor.getSession().setMode("ace/mode/python");
      editor.setShowPrintMargin(false);
      /************************************** Socket Setup ***************************************************************/
      var socket = io();
      socket.on('reply', function(data){
      document.getElementById("code_snippets").innerHTML += data.response + '\n';
      });

      socket.on('opened', function(data){
      editor.setValue(data.file, -1)
      editor.navigateFileEnd()
      });

      socket.on('executionresults', function(data){
      document.getElementById("code_execution").innerHTML += data.response + '<br>';
      });

      socket.on('welcome', function(data){
      var user = ""+ "#{user_name}"
      console.log(user);
      document.getElementById("code_snippets").innerHTML += data.message +  user;
      });

      var deleteFile = function (filename){
        var user = "#{user_name}"
        socket.emit('deleteFile', {username: user, name: filename});
      }

      var downloadFile = function (filename){
        var user = "#{user_name}"
        socket.emit('download', {username: user , name: filename});
      } 

      var saveFile = function (filename){
      var fileContent = editor.getValue();
      var user = "#{user_name}"
      socket.emit('saveFile', {content: fileContent, username: user, name: filename});
      }

      var openFile = function(filename){
        var user = "#{user_name}";
        socket.emit('open', {username: user, name: filename});
      }


      socket.on('files', function(data){

      console.log(data.filename);
      var user = "#{user_name}";
      var file = document.createElement('div');
      var filename = data.filename;
      file.id = data.filename;
      file.className = "lv-item media"; 

      file.addEventListener("click", function() {
        var list = document.getElementsByClassName("button_holder");
        console.log(list)
        for (var i = 0; i < list.length; i++){
          list[i].style.visibility = "hidden"
        }
        openFile(data.filename);
        document.getElementById(data.filename+"_buttons").style.visibility="visible";
        console.log('true')
      }, false);

      var parent = document.getElementsByClassName("lv-body")[0];
      parent.appendChild(file);

      parent = file;
      var button_demo_div = document.createElement('div');
      button_demo_div.className = "btn-demo";
      parent.appendChild(button_demo_div);

      parent = button_demo_div;
      var titleDiv = document.createElement('div');
      titleDiv.classname = "lv-title"
      titleDiv.innerHTML = data.filename;
      parent.append(titleDiv);

      parent = titleDiv;
      var button_holder_Div = document.createElement('div');
      button_holder_Div.className = 'button_holder';
      button_holder_Div.id = data.filename+"_buttons"
      button_holder_Div.style.visibility ='hidden'
      parent.append(button_holder_Div);

      parent = button_holder_Div;
      var save_button = document.createElement('button');
      save_button.className = "btn btn-default btn-sm";
      save_button.type = "button";
      parent.append(save_button);

      var download_button = document.createElement('button');
      download_button.className = "btn btn-default btn-sm";
      download_button.type = "button";
      parent.append(download_button);

      var delete_button = document.createElement('button');
      delete_button.className = "btn btn-default btn-sm";
      delete_button.type = "button";
      parent.append(delete_button);

      parent = save_button;
      var spanDiv = document.createElement('span');
      spanDiv.className = 'glyphicon glyphicon-floppy-save';
      parent.append(spanDiv);
      parent.innerHTML += "Save";

      spanDiv = document.createElement('span');
      spanDiv.className = 'glyphicon glyphicon-download';
      download_button.append(spanDiv);
      download_button.innerHTML += "Download";

      spanDiv = document.createElement('span');
      spanDiv.className = 'glyphicon glyphicon-trash';
      delete_button.append(spanDiv);
      delete_button.innerHTML += "Delete";

      delete_button.addEventListener("click", function(e) {
        document.getElementById(data.filename).remove();
        deleteFile(data.filename);
        console.log('true')
        e.stopPropagation()
      }, false);

      download_button.addEventListener("click", function(e) {
        downloadFile(data.filename);
        console.log('true')
        e.stopPropagation()
      }, false);

      save_button.addEventListener("click", function(e) {
        saveFile(data.filename);
        console.log('true')
        e.stopPropagation()
      }, false);
     });

      socket.on('downloadableFile', function(data){
      var elem = document.createElement('a');
      elem.setAttribute('href', 'data:text/plain;charset=utf-8,' + encodeURIComponent(data.content));
      elem.setAttribute('download', data.name+ ".py");
      elem.style.display = 'none';
      document.body.appendChild(elem);
      elem.click();
      document.body.removeChild(elem);
      });
      /**************************************** Running Code on the Client Side ******************************************/
      // output functions are configurable.  This one just appends some text
      // to a pre element.
      function outf(text) {
      var mypre = document.getElementById("output");
      mypre.innerHTML = mypre.innerHTML + text;
      }
      function builtinRead(x) {
      if (Sk.builtinFiles === undefined || Sk.builtinFiles["files"][x] === undefined)
      throw "File not found: '" + x + "'";
      return Sk.builtinFiles["files"][x];
      }
      // Here's everything you need to run a python program in skulpt
      // grab the code from your textarea
      // get a reference to your pre element for output
      // configure the output function
      // call Sk.importMainWithBody()
      function runit(code) {
      var prog = code;
      var mypre = document.getElementById("output");
      Sk.pre = "output";
      Sk.configure({output:outf, read:builtinRead});
      (Sk.TurtleGraphics || (Sk.TurtleGraphics = {})).target = 'mycanvas';
      var myPromise = Sk.misceval.asyncToPromise(function() {
      return Sk.importMainWithBody("<stdin>", false, prog, true);
      });
      myPromise.then(function(mod) {
      console.log('success');
      },
      function(err) {
      console.log(err.toString());
      });
      }
      /****************************************  Compiler ****************************************************************/
      listening = false;
      socket.emit('getFiles', {username: "#{user_name}"});
      var compiler = function(data, editor){

            var messages = data.split(" ");

            for (i = 0; i < messages.length; i++){
              if ((messages[i] == 'buggy') && ((i + 2) < messages.length)){
                if ((messages[i+1] == "start") && (messages[i+2] == 'listening')){
                  listening = true;
                  break;
                }
                else if ((messages[i+1] == "stop") && (messages[i+2] == 'listening')){
                  listening = false;
                  break;
                }
                else if (messages[i+1] == "search") {
                  var query = "";
                  for (j = i + 1; j < messages.length; j++){
                    query += messages[j] + ' ';
                  }
                  document.getElementById("snippet").innerHTML+=query + '<br>';
                  socket.emit('search', {message: query});
                  break;
                }
                else if ((messages[i+1] == "please") && (messages[i+2] == "run")) {
                  var text = editor.getValue();
                  document.getElementById("code_execution").innerHTML += "Executing code:" + '<br>';
                  socket.emit('execute', {message: text});
                  break;
                }
                else if ((((messages[i+1] == "save") && (messages[i+2] == 'file')) && (messages[i+3] == 'as')) && (messages.length >= 5)) {
                  var fileContent = editor.getValue();
                  var filename = messages[i+4]
                  var user = "#{user_name}"
                  socket.emit('saveFile', {content: fileContent, username: user, name: filename});
                  break;
                }
                else if ((((messages[i+1] == "delete") && (messages[i+2] == 'file')) && (messages[i+3] == 'named')) && (messages.length >= 5)) {
                  var filename = messages[i+4]
                  var user = "#{user_name}"
                  socket.emit('deleteFile', {username: user, name: filename});
                  break;
                }
                else if ((((messages[i+1] == "download") && (messages[i+2] == 'file')) && (messages[i+3] == 'named')) && (messages.length >= 5)) {
                  var filename = messages[i+4]
                  var user = "#{user_name}";
                  socket.emit('download', {username: user , name: filename});
                  break;
                }
                else if ((((messages[i+1] == "open") && (messages[i+2] == 'file')) && (messages[i+3] == 'named')) && (messages.length >= 5)) {
                  var filename = messages[i+4]
                  var user = "#{user_name}";
                  socket.emit('open', {username: user, name: filename});
                  break;
                }
              }
              if (listening){
                if (messages[i] == "quote"){
                  editor.insert("\"");
                }
                else if (messages[i] == "Focus") {
                  editor.focus();
                  }
                else if (messages[i] == "star") {
                  editor.insert("*");
                }
                else if (messages[i] == "pound") {
                  editor.insert("#");
                }
                else if (messages[i] == "comma") {
                  editor.insert(",");
                }
                else if ((messages[i] == "new") || (messages[i] == "\n")) {
                  editor.insert("\n");
                }
                else if (messages[i] == "space"){
                  editor.insert(" ");
                }
                else if (messages[i] == "delete"){
                  editor.removeWordLeft();
                }
                else if (messages[i] == "clear") {
                  editor.removeToLineStart();
                }
                else if (messages[i] == "reset") {
                  editor.selectAll();
                  editor.removeLines();
                }
                else if ( (messages[i] == "move") || (messages[i] == "go") ) {       
                   if ((messages[i+1] == "upwards") || (messages[i+1] == "up")) {
                      editor.navigateUp(1);
                      i++;
                    }
                    else if ((messages[i+1] == "downwards") || (messages[i+1] == "down")){
                      editor.navigateDown(1);
                      i++;
                   }
                   else if (messages[i+1] == "left") {
                      editor.navigateWordLeft();
                      i++;
                   }
                   else if (messages[i+1] == "right") {
                      editor.navigateWordRight();
                      i++;
                   }
                   else if (messages[i+1] == "to") {
                      if (messages[i+2] == "start") {
                        editor.navigateFileStart();
                        i++;
                      }
                      else if (messages[i+2] == "end") {
                        editor.navigateFileEnd();
                        i++;
                      }
                      else if (messages[i+2] == "front") {
                        editor.navigateLineStart();
                        i++;
                      }
                      else if (messages[i+2] == "back") {
                        editor.navigateLineEnd();
                        i++;
                      }
                      else {
                        editor.insert("move to ");
                      }
                      i++;
                    }
                   else {
                      editor.insert(messages[i]+" ");
                    }
                  }
                else if (messages[i] == "left") {
                   if (messages[i+1] == "curly") {
                      editor.insert("{");
                      i++;
                    }
                    else if (messages[i+1] == "paren") {
                      editor.insert("(");
                      i++;
                    }
                   else if (messages[i+1] == "bracket") {
                      editor.insert("[");
                      i++;
                   }
                  else {
                      editor.insert(messages[i]+' ');
                    }
                }
                else if (messages[i] == "right") {
                   if (messages[i+1] == "curly") {
                      editor.insert("}");
                      i++;
                    }
                    else if (messages[i+1] == "paren") {
                      editor.insert(")");
                      i++;
                   }
                   else if (messages[i+1] == "bracket") {
                      editor.insert("]");
                      i++;
                    }
                    else {
                      editor.insert(messages[i]+' ');
                    }
                }
                else{
                  editor.insert(messages[i]+' ');
                }
              }
            }
          }


          if (!('webkitSpeechRecognition' in window)) {
            upgrade();
          } else {
            var recognition = new webkitSpeechRecognition();
            recognition.continuous = false;
            recognition.interimResults = false;
            recognition.onerror = function(event) { console.log("oops") }
            recognition.onend = function() { recognition.start() }
            recognition.onresult = function(event) {
            compiler(event.results[0][0].transcript, editor);
          };
        }
          console.log("Hello World")
          recognition.start()
